clear all

load('rnumber1.mat');   % random numbers generated by rnumber.m

%% model parameters

% Degradation rate:
ks = 0.125;  ku200 = 0.05;   kmz = 0.5;   kz = 0.1;  ke=0.1;
kmsl=0.5; ksl=0.1155; kk=0.1732;
% Transcription rate:
gs = 18000; gu200 = 2100;   gmz = 11;   gz = 100; ge=50000; 
gmsl=90; gsl=50000; gk=50000;
% Hills function threshold :
e0mz=80000; z0e=100000; I0s=100000; z0u200 = 220000;   z0mz = 27500;   s0u200 = 180000;   s0mz = 180000; u2000 = 10000; 
sl0u200=220000; sl0e=250000; sl0msl=150000; sl0s=225000; s0msl=180000; s0e=150000; e0s=100000;  s0s=300000; e0msl=300000;
k0s=275000; k0msl=300000; s0k=180000; sl0k=225000; k0k=250000;
% Cooperativity:
nsmz = 2;  nIs = 2; nze=2; nzu200 = 3;   nsu200 = 2;   nzmz = 2;   nu200 = 6; nemz=2; 
nslu200=1; nsle=3; nslmsl=4; nsls=3; nsmsl=1; nse=3; nes=1; nss=5; nemsl=2; nks=2; nsk=2; nslk=4; nkmsl=2; nkk=3;
% fold change
lamdaze =0.1; lamdazu200 =0.1;   lamdasu200 = 0.1;  lamdazmz = 7.5;   lamdasmz = 10; lamdaemz=0.6; lamdaIs=3;
lamdaslu200=0.4; lamdasle=0.4; lamdaslmsl=2; lamdasls=0.5; lamdasmsl=0.5; lamdase=0.3; lamdaes=0.5; lamdass=0.4;
lamdaemsl=0.6; lamdakk=2; lamdask=0.25; lamdaslk=0.5; lamdakmsl=0.25; lamdaks=0.5;


N = 80000;   B = 0.04;   I0 = 90000;  %noise related --    arbitrary - /hr - molecules

% parameters for epigenetics
alpha=0;
beta=100;

% simulation parameters                                                                       
tau=0.01;               % time step(hrs)
days = 200;
maxstep=days*2400;       % simulation time(500 days is enough for the system to reach stable ditribution here)
maxtimes=500;          % times of for-loop

%% initialization

u200 = zeros(maxtimes,maxstep+1);  
mz = zeros(maxtimes,maxstep+1);
z = zeros(maxtimes,maxstep+1);
s = zeros(maxtimes,maxstep+1);
msl = zeros(maxtimes,maxstep+1);
sl = zeros(maxtimes,maxstep+1);
k = zeros(maxtimes,maxstep+1);

I = zeros(maxtimes,maxstep+1);

new_t_k_s=zeros(maxtimes,maxstep+1);   %epigenetic feedback initialization
new_t_k_msl=zeros(maxtimes,maxstep+1);
new_t_k_k=zeros(maxtimes,maxstep+1);
new_t_s_k=zeros(maxtimes,maxstep+1);
new_t_sl_k=zeros(maxtimes,maxstep+1);



u200(:,1) = 33554.833280;
mz(:,1) = 56.5;
z(:,1) = 0;
sl(:,1) = 0;
msl(:,1) = 0;
s(:,1) = 0;
k(:,1)=0;
I(:,1) = 0;

new_t_k_s(:,1)=400000;
new_t_k_msl(:,1)=500000;
new_t_k_k(:,1)=400000;
new_t_s_k(:,1)=300000;
new_t_sl_k(:,1)=500000;

kr=1;                   % index of the random number array
krr=1;

%% ode loop

for j=1:maxtimes
    
for i=1:maxstep
    
%Ym function components
Mu0=1/(1+u200(j,i)/u2000)^nu200;
Mu1=(u200(j,i)/u2000)/(1+u200(j,i)/u2000)^nu200;
Mu2=(u200(j,i)/u2000)^2/(1+u200(j,i)/u2000)^nu200;
Mu3=(u200(j,i)/u2000)^3/(1+u200(j,i)/u2000)^nu200;
Mu4=(u200(j,i)/u2000)^4/(1+u200(j,i)/u2000)^nu200;
Mu5=(u200(j,i)/u2000)^5/(1+u200(j,i)/u2000)^nu200;
Mu6=(u200(j,i)/u2000)^6/(1+u200(j,i)/u2000)^nu200;

%Hills functions
Hillszu200=(1+lamdazu200*(z(j,i)/z0u200)^nzu200)/(1+(z(j,i)/z0u200)^nzu200);
Hillssu200=(1+lamdasu200*(s(j,i)/s0u200)^nsu200)/(1+(s(j,i)/s0u200)^nsu200);
Hillszmz=(1+lamdazmz*(z(j,i)/z0mz)^nzmz)/(1+(z(j,i)/z0mz)^nzmz);
Hillssmz=(1+lamdasmz*(s(j,i)/s0mz)^nsmz)/(1+(s(j,i)/s0mz)^nsmz);
HillsIs=(1+lamdaIs*(I(j,i)/I0s)^nIs)/(1+(I(j,i)/I0s)^nIs);
Hillssls=(1+lamdasls*(sl(j,i)/sl0s)^nsls)/(1+(sl(j,i)/sl0s)^nsls);
Hillssmsl=(1+lamdasmsl*(s(j,i)/s0msl)^nsmsl)/(1+(s(j,i)/s0msl)^nsmsl);
Hillsslu200=(1+lamdaslu200*(sl(j,i)/sl0u200)^nslu200)/(1+(sl(j,i)/sl0u200)^nslu200);
Hillsslmsl=(1+lamdaslmsl*(sl(j,i)/sl0msl)^nslmsl)/(1+(sl(j,i)/sl0msl)^nslmsl);
Hillsslk=(1+lamdaslk*(sl(j,i)/sl0k)^nslk)/(1+(sl(j,i)/sl0k)^nslk);
Hillssk=(1+lamdask*(s(j,i)/new_t_s_k(j,i))^nsk)/(1+(s(j,i)/new_t_s_k(j,i))^nsk);
Hillsks=(1+lamdaks*(k(j,i)/new_t_k_s(j,i))^nks)/(1+(k(j,i)/new_t_k_s(j,i))^nks);
Hillskmsl=(1+lamdakmsl*(k(j,i)/k0msl)^nkmsl)/(1+(k(j,i)/k0msl)^nkmsl);
Hillskk=(1+lamdakk*(k(j,i)/k0k)^nkk)/(1+(k(j,i)/k0k)^nkk);
Hillsss=(1+lamdass*(s(j,1)/s0s)^nss)/(1+(s(j,1)/s0s)^nss);


 %Addition of noise to I
    u200(j,i+1) = u200(j,i) + tau*(gu200*Hillszu200*Hillssu200*Hillsslu200-mz(j,i)*(0.005*6*Mu1+2*0.05*15*Mu2+3*0.5*20*Mu3+4*0.5*15*Mu4+5*0.5*6*Mu5+6*0.5*Mu6)-msl(j,i)*(0.005*6*Mu1+2*0.05*15*Mu2+3*0.5*20*Mu3+4*0.5*15*Mu4+5*0.5*6*Mu5+6*0.5*Mu6)-ku200*u200(j,i));
    mz(j,i+1)   = mz(j,i) + tau*(gmz*Hillszmz*Hillssmz-mz(j,i)*(0.04*6*Mu1+0.2*15*Mu2+20*Mu3+15*Mu4+6*Mu5+Mu6)-kmz*mz(j,i));
    z(j,i+1)    = z(j,i) + tau*(gz*mz(j,i)*(Mu0+0.6*6*Mu1+0.3*15*Mu2+0.1*20*Mu3+0.05*15*Mu4+0.05*6*Mu5+0.05*Mu6)-kz*z(j,i));
    s(j,i+1)    = s(j,i) + tau*(gs*HillsIs*Hillsss*Hillssls*Hillsks-ks*s(j,i));
    msl(j,i+1)  = msl(j,i)+tau*(gmsl*Hillssmsl*Hillskmsl-msl(j,i)*(0.04*6*Mu1+0.2*15*Mu2+20*Mu3+15*Mu4+6*Mu5+Mu6)-kmsl*msl(j,i));
    sl(j,i+1)   = sl(j,i)+tau*(gsl*msl(j,i)*(Mu0+0.6*6*Mu1+0.3*15*Mu2+0.1*20*Mu3+0.05*15*Mu4+0.05*6*Mu5+0.05*Mu6)-ksl*sl(j,i));
    k(j,i+1)    = k(j,i)+tau*(gk*Hillsslk*Hillssk*Hillskk-kk*k(j,i));
    I(j,i+1)    = I(j,i) + tau*(B*(I0-I(j,i))+rnumber11(krr)*N);
    krr=krr+1;

   % epigenetic feedback
   new_t_k_s(j,i+1)=new_t_k_s(j,i)+tau*((k0s-new_t_k_s(j,i)-1*k(j,i)))*(1/beta);
   new_t_s_k(j,i+1)=new_t_s_k(j,i)+tau*((s0k-new_t_s_k(j,i)-0*s(j,i)))*(1/beta);
   
   
if u200(j,i+1)<0
   u200(j,i+1)=0;
end
if mz(j,i+1)<0
   mz(j,i+1)=0;
end  
if z(j,i+1)<0
   z(j,i+1)=0;
end  
if msl(j,i+1)<0
   msl(j,i+1)=0;
end  
if s(j,i+1)<0
   s(j,i+1)=0;
end  
if sl(j,i+1)<0
   sl(j,i+1)=0;
end  
if k(j,i+1)<0
   k(j,i+1)=0;
end  


end

end

%% statistical analysis

e_state=zeros(1,days+1);
m_state=zeros(1,days+1);
h_state=zeros(1,days+1);

%decide the state of system by mz value
for i=0:days
    
    for j=1:maxtimes
        if mz(j,i*2400+1)<95
           e_state(i+1)=e_state(i+1)+1; 
        elseif mz(j,i*2400+1)>95 && mz(j,i*2400+1)<450
           h_state(i+1)=h_state(i+1)+1;
        elseif mz(j,i*2400+1)>450
           m_state(i+1)=m_state(i+1)+1;
        end
    end
     
end

% calculate the population distribution
pe_state=zeros(1,days+1);
ph_state=zeros(1,days+1);
pm_state=zeros(1,days+1);
day=zeros(1,days+1);

for i=1:days+1
    pe_state(i)=100*e_state(i)/(e_state(i)+h_state(i)+m_state(i));
    ph_state(i)=100*h_state(i)/(e_state(i)+h_state(i)+m_state(i));
    pm_state(i)=100*m_state(i)/(e_state(i)+h_state(i)+m_state(i));
    day(i)=i-1;
end



%% plotting data
figure()
hold on
grid(gca,'minor')
grid on
plot(day,pe_state,'LineWidth',3);
hold on
plot(day,ph_state,'LineWidth',3);
hold on
plot(day,pm_state,'LineWidth',3);
hold on
legend('E','H','M');
